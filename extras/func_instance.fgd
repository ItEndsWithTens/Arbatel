@PointClass size( -8 -8 -8, 8 8 8 ) flags(Angle) color(255 255 0) instance(file) = func_instance : "An automatically updated prefab. " +
  "Set Filename to the name of a .map containing geometry and/or entities you'd like to duplicate at " +
  "various locations in this map. Position and orient this func_instance in any way you like, and on " +
  "compile the map referenced herein will be collapsed into this map. Use for common architectural " +
  "elements, repetitive entity configurations, building on grid but positioning off grid while " +
  "maintaining ease of editing, etc."
[
	targetname(target_source) : "Fixup Name" : : "A name that will, depending on the fixup style, be prepended or appended to any entities. If a Fixup Style is set, but a Fixup Name is not provided, an automatically generated name will be used. Keep in mind that even with fixup enabled and a name set, you can selectively avoid fixup by giving entities names starting with the @ symbol."
	file(string) : "Filename" : : "A path, relative to the current map file's location, pointing to the map you'd like to copy in."
	fixup_style(Choices) : "Fixup Style" : 0 : "The method by which entity names will be fixed up." =
	[
		0 : "Prefix"
		1 : "Postfix"
		2 : "None"
	]

	replace01(string) : "Replace" : : "A replacement parameter that takes the form of $variable value. For example, set this field to $brightness 750 and any occurrence of $brightness inside the Filename map will be replaced with 750 when the instances are collapsed."
	replace02(string) : "Replace" : : "Materials can also be replaced, with #. For example, setting a replacement variable to #SKY1 DOPEFISH will retexture any surfaces in the Filename map, replacing the classic purple sky with everyone's favorite goofy fish."
	replace03(string) : "Replace" : : ""
	replace04(string) : "Replace" : : ""
	replace05(string) : "Replace" : : ""
	replace06(string) : "Replace" : : ""
	replace07(string) : "Replace" : : ""
	replace08(string) : "Replace" : : ""
	replace09(string) : "Replace" : : ""
	replace10(string) : "Replace" : : "If you need more than ten replacements, don't forget you can turn off SmartEdit (if applicable) and add keys manually: replace11, replace12, etc."
]

@SolidClass color(255 20 147) = func_placeholder : "Placeholder geometry, to be removed with the --remove_entities option " +
  "of Quinstance 0.3.0 and later."
[
]

@PointClass size(-8 -8 -8, 8 8 8) color(200 200 0) instance(_external_map) = misc_external_map : "External map prefab. each 'misc_external_map' imports brushes from an external .map file, applies rotations specified by the '_external_map_angles' key, then translates them to the 'origin' key of the 'misc_external_map' entity. Finally, the classname of the 'misc_external_map' is switched to the one provided by the mapper in the '_external_map_classname' key. (The 'origin' key is also cleared to '0 0 0' before saving the .bsp). The external .map file should consist of worldspawn brushes only, although you can use func_group for editing convenience. Brush entities are merged with the worldspawn brushes during import. All worldspawn keys, and any point entities are ignored. Currently, this means that the 'wad' key is not handled, so you need to add any texture wads required by the external .map file to your main map. Note that you can set other entity keys on the 'misc_external_map' to configure the final entity type. e.g. if you set '_external_map_classname' to 'func_door', you can also set a 'targetname' key on the 'misc_external_map', or any other keys for 'func_door'"
[ 
	_external_map(string) : "Path" :  : "Specifies the filename of the .map to import."
	_external_map_classname(string) : "Class name" :  : "What entity you want the external map to turn in to. You can use internal qbsp entity types such as 'func_detail', or a regular bmodel classname like 'func_wall' or 'func_door'."
	_external_map_angles(string) : "Angle" :  : "Rotation for the prefab, 'pitch yaw roll' format. Negative pitch is down."
	_external_map_angle(integer) : "Short angle" :  : "Short version of '_external_map_angles' for when you want to specify just a yaw rotation."
  _external_map_scale(string) : "Scale" :  : "Scale factor for the prefab, defaults to 1. Either specify a single value or three scales, 'x y z'."
]
